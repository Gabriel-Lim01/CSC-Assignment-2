#pragma checksum "C:\Users\Gabriel\Desktop\Poly stuff\CSC\CSC Assignment 2\TheLifeTimeTalents\Views\Home\Dashboard.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "48c919d28fd9865737a097b0a2636ae7cfd2d2be"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Dashboard), @"mvc.1.0.view", @"/Views/Home/Dashboard.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Dashboard.cshtml", typeof(AspNetCore.Views_Home_Dashboard))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\Gabriel\Desktop\Poly stuff\CSC\CSC Assignment 2\TheLifeTimeTalents\Views\_ViewImports.cshtml"
using TheLifeTimeTalents;

#line default
#line hidden
#line 2 "C:\Users\Gabriel\Desktop\Poly stuff\CSC\CSC Assignment 2\TheLifeTimeTalents\Views\_ViewImports.cshtml"
using TheLifeTimeTalents.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"48c919d28fd9865737a097b0a2636ae7cfd2d2be", @"/Views/Home/Dashboard.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"749dea2950bf919e74914922d2fb05f3ce34aef0", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Dashboard : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("dataForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("role", new global::Microsoft.AspNetCore.Html.HtmlString("form"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-horizontal"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("editModalForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/jquery/dist/jquery.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 844, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "58da71d7a7b24888ad1b4899fb6ab8d9", async() => {
                BeginContext(6, 831, true);
                WriteLiteral(@"
    <div class=""panel  panel-primary"">
        <div class=""panel-heading"">
            Manage Talents
        </div>
        <div class=""panel-body"">
            <div class=""row"">
                <div class=""col-md-12"">
                    <table class=""table table-striped"">
                        <thead>
                            <tr>
                                <th>Photo</th>
                                <th>Name</th>
                                <th>Short Name</th>
                                <th>Reknown</th>
                                <th>Bio</th>
                            </tr>
                        </thead>
                        <tbody id=""talentsTableBody""></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(844, 3677, true);
            WriteLiteral(@"

<style>
    .list-group-item list-group-item-danger {
        width: 500px !important;
    }

    #noty_center_layout_container {
        width: 500px !important;
    }

    .modal-header .close {
        margin-top: -21px;
    }

    .modal-header-edit {
        background-color: cornflowerblue;
        border-top-left-radius: 0;
        border-top-right-radius: 0;
    }

        .modal-header-edit .close {
            color: white;
            text-shadow: 0 1px 0 #000;
            opacity: 2.5;
        }

    .modal-confirm {
        color: #636363;
        width: 400px;
        top: 115px;
    }

        .modal-confirm .modal-content {
            border-radius: 5px;
            border: none;
            text-align: center;
            font-size: 14px;
        }

        .modal-confirm .modal-header-delete {
            border-bottom: none;
            position: relative;
        }

        .modal-confirm h4 {
            text-align: center;
            fon");
            WriteLiteral(@"t-size: 26px;
        }

        .modal-confirm .close {
            top: -5px;
            right: -2px;
            color: white;
            text-shadow: 0 1px 0 #000;
            opacity: 2.5;
        }

        .modal-confirm .modal-body {
            color: #999;
        }

        .modal-confirm .modal-footer {
            border: none;
            text-align: center;
            border-radius: 5px;
            font-size: 13px;
            padding: 10px 70px 25px;
        }

            .modal-confirm .modal-footer a {
                color: #999;
            }

        .modal-confirm .icon-box {
            width: 80px;
            height: 80px;
            margin: 0 auto;
            border-radius: 50%;
            z-index: 9;
            text-align: center;
            border: 3px solid #f15e5e;
        }

            .modal-confirm .icon-box i {
                color: #f15e5e;
                font-size: 46px;
                display: inline-block;
           ");
            WriteLiteral(@"     margin-top: 3px;
                margin-right: 0;
            }

    .modal-header-delete {
        background-color: #f15e5e;
        margin-bottom: 10px;
    }

    .trigger-btn {
        display: inline-block;
        margin-left: 13px;
        color: red;
    }

    .edit, .edit:hover {
        color: blue;
    }

    .imgContainer {
        position: relative;
    }

    #uploadhover {
        cursor: pointer;
    }

    .editImgbutton {
        position: absolute;
        width: 200px;
        left: 0;
        top: 80px;
        text-align: center;
        opacity: 0;
        transition: opacity .35s ease;
    }

        .editImgbutton a {
            width: 200px;
            padding: 12px 48px;
            text-align: center;
            color: white;
            background-color: rgba(71, 143, 225, 0.8);
            z-index: 4;
            font-size: 0.85rem;
        }

    .imgContainer:hover .editImgbutton {
        opacity: 1;
    }
</style>
");
            WriteLiteral(@"
<!-- Add Modal -->
<div class=""modal fade"" id=""exampleModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""exampleModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"" id=""exampleModalLabel"">Create Talent Record</h5>
                <a href=""#"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </a>
            </div>
            <div class=""modal-body"">
                ");
            EndContext();
            BeginContext(4521, 2566, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "64d37e3c32e24ab4b9423fa878382268", async() => {
                BeginContext(4577, 2503, true);
                WriteLiteral(@"
                    <input onchange=""return fileValidation()"" type=""file"" id=""fileInput"" style=""padding: 2px;"" />
                    <div class=""form-group"">
                        <div class=""imgContainer"" style=""display:none;"">
                            <img id=""changeImage"" style=""width:200px;"" />
                        </div>
                    </div>
                    <div class=""form-group"">
                        <label class=""control-label col-md-5"" for=""TalentNameInput"">Name</label>
                        <div class=""col-md-5"">
                            <input type=""text"" id=""TalentNameInput"" name=""TalentNameInput"" class=""form-control input-group-sm""
                                   maxlength=""30"" value="""" />
                        </div>
                    </div>
                    <div class=""form-group"">
                        <label class=""control-label col-md-5"" for=""TalentShortNameInput"">Short Name</label>
                        <div class=""col-md-5"">
      ");
                WriteLiteral(@"                      <input type=""text"" id=""TalentShortNameInput"" name=""TalentShortNameInput"" class=""form-control input-group-sm""
                                   maxlength=""30"" value="""" />
                        </div>
                    </div>
                    <div class=""form-group"">
                        <label class=""control-label col-md-5"" for=""TalentReknownInput"">Reknown</label>
                        <div class=""col-md-5"">
                            <input type=""text"" id=""TalentReknownInput"" name=""TalentReknownInput"" class=""form-control input-group-sm""
                                   maxlength=""30"" value="""" />
                        </div>
                    </div>
                    <div class=""form-group"">
                        <label class=""control-label col-md-5"" for=""TalentBioInput"">Bio</label>
                        <div class=""col-md-5"">
                            <textarea id=""TalentBioInput"" name=""TalentBioInput"" class=""form-control""></textarea>
          ");
                WriteLiteral(@"              </div>
                    </div>
                    <div class=""modal-footer"">
                        <button type=""button"" onclick=""addRecord();"" class=""btn btn-primary"" value=""Add"" id=""addButton""><i class=""fa fa-spinner fa-spin fa-2x hidden"" id=""createSpinner"" style=""margin-right:5px;""></i>Add</button>
                        <button type=""reset"" class=""btn btn-grey"">Clear</button>
                    </div>

                ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(7087, 686, true);
            WriteLiteral(@"
            </div>
        </div>
    </div>
</div>

<!-- Edit Modal -->
<div class=""modal fade"" id=""editModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""editModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header modal-header-edit"">
                <h5 class=""modal-title"" id=""exampleModalLabel"" style=""color:white;"">Edit Item</h5>
                <a href=""#"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </a>
            </div>
            <div class=""modal-body"">
                ");
            EndContext();
            BeginContext(7773, 2797, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d70754507dd249c2984e78e8c45ab8b5", async() => {
                BeginContext(7834, 2729, true);
                WriteLiteral(@"
                    <div class=""imgContainer"">
                        <img alt=""upload"" style=""width:200px; margin-top: -14px;"" id=""editPhoto"">
                        <div onclick=""$('#newphoto').click();"" class=""editImgbutton""><a href=""#""> Change Photo </a></div>
                        <input id='newphoto' onchange=""editPhotoFunction(this); del = true;"" type='file' style=""display: none;"" />
                    </div>
                    <div class=""form-group"">
                        <label class=""control-label col-md-5"" for=""UpdateTalentNameInput"">Name</label>
                        <div class=""col-md-5"">
                            <input type=""text"" id=""UpdateTalentNameInput"" name=""UpdateTalentNameInput"" class=""form-control input-group-sm""
                                   maxlength=""30"" value="""" />
                        </div>
                    </div>
                    <div class=""form-group"">
                        <label class=""control-label col-md-5"" for=""UpdateTalentShortN");
                WriteLiteral(@"ameInput"">Short Name</label>
                        <div class=""col-md-5"">
                            <input type=""text"" id=""UpdateTalentShortNameInput"" name=""UpdateTalentShortNameInput"" class=""form-control input-group-sm""
                                   maxlength=""30"" value="""" />
                        </div>
                    </div>
                    <div class=""form-group"">
                        <label class=""control-label col-md-5"" for=""UpdateTalentReknownInput"">Reknown</label>
                        <div class=""col-md-5"">
                            <input type=""text"" id=""UpdateTalentReknownInput"" name=""UpdateTalentReknownInput"" class=""form-control input-group-sm""
                                   maxlength=""30"" value="""" />
                        </div>
                    </div>
                    <div class=""form-group"">
                        <label class=""control-label col-md-5"" for=""UpdateTalentBioInput"">Bio</label>
                        <div class=""col-md-5"">
    ");
                WriteLiteral(@"                        <textarea id=""UpdateTalentBioInput"" name=""UpdateTalentBioInput"" class=""form-control""></textarea>
                        </div>
                    </div>
                    <input type=""hidden"" id=""editId"" />
                    <div class=""modal-footer"">
                        <button type=""reset"" class=""btn btn-grey"" onclick=""resetEdit()"">Reset</button>
                        <button type=""button"" onclick=""updateTalent()"" class=""btn btn-success"" value=""Save"" id=""saveButton""><i class=""fa fa-spinner fa-spin fa-2x hidden"" id=""updateEditSpinner"" style=""margin-right:5px;""></i>Save Changes</button>
                    </div>
                ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(10570, 1146, true);
            WriteLiteral(@"
            </div>
        </div>
    </div>
</div>

<!-- Delete Modal -->
<div id=""deleteModal"" class=""modal fade"">
    <div class=""modal-dialog modal-confirm"">
        <div class=""modal-content"">
            <div class=""modal-header modal-header-delete"">
                <h5 class=""modal-title"" id=""exampleModalLabel"" style=""color:white;"">Delete Talent Record</h5>
                <a href=""#"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </a>
            </div>
            <div class=""icon-box"">
                <i class=""m-r-10 mdi mdi-close""></i>
            </div>
            <div class=""modal-body"">
                <p id=""deleteRec""></p>
                <input type=""hidden"" id=""deleteId"" />
            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-info"" data-dismiss=""modal"">Cancel</button>
                <button type=""button"" onclick=""deleteReco");
            WriteLiteral("rd()\" id=\"DeleteTalent\" class=\"btn btn-danger\">Delete</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(11734, 187, true);
                WriteLiteral("\r\n\r\n    <script type=\"text/javascript\" src=\"https://sdk.clarifai.com/js/clarifai-latest.js\"></script>\r\n    <script src=\"https://sdk.amazonaws.com/js/aws-sdk-2.1.24.min.js\"></script>\r\n    ");
                EndContext();
                BeginContext(11921, 51, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cf45ddceaeee4c4396eb9e33e3df52a3", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(11972, 22641, true);
                WriteLiteral(@"
    <script>
        document.addEventListener(""DOMContentLoaded"", function () {
            if (!sessionStorage.getItem(""user"")) {
                document.body.innerHTML = ""<h1>401 Unauthorized</h1>"";
            }
        });

        $(""#logout"").click(function (e) {
            e.preventDefault();
            sessionStorage.removeItem(""user"");
            window.location.href = ""index"";
        });

        loadTalentsData();
        // Overlaid on faces
        //var overlay = ""💩"";
        //var overlay = ""☐"";

        // These will contain our canvas context later
        var canvas, ctx;

        // We'll populate this later
        // clarifaiFaces gives us values between 0 and 1
        // realFaces will store the real pixel positioning relative to the image size
        var imageDetails = {
            clarifaiFaces: [],
            realFaces: []
        };

        var myApiKey = '';
        // Initialize a new Clarifai app
        var app = new Clarifai.App({
  ");
                WriteLiteral(@"          apiKey: myApiKey
        });

        var bucketName = 'yapjlbuckets3';
        var bucketRegion = 'us-east-1';

        AWS.config.update({
            accessKeyId: '',
            secretAccessKey: '',
            sessionToken: ''

        });


        // This function calls the face detection alpha model and pushes the bounding boxes to imageDetails.clarifaiFaces
        function faceDetection(b64Img) {
            app.models.predict(""a403429f2ddf4b49b307e318f00e528b"", {
                base64: b64Img
            }).then(
                function (res) {
                    var data = res.outputs[0].data.regions;
                    console.log(data);
                    if (data == null) {
                        console.log(""data is null"");
                        alert(""File not uploaded as no human was detected in the image"");
                        document.getElementById(""addButton"").disabled = true;
                    }
                    else if (data !== nul");
                WriteLiteral(@"l) {
                        for (var i = 0; i < data.length; i++) {
                            //console.log(imageDetails.clarifaiFaces);
                            imageDetails.clarifaiFaces.push(data[i].region_info.bounding_box);
                        }
                        //uploadFile();
                        document.getElementById(""addButton"").disabled = false;
                        console.log(""success"");
                    }
                },
                function (err) {
                    document.getElementById(""message"").innerHTML = ""This image has nothing to identify"";
                    console.log(err);
                }
            )
        } // End of FaceDetection function

        function uploadFile() {
            var s3 = new AWS.S3({
                params: { Bucket: 'yapjlbuckets3' }
            });
            var file = document.getElementById('image').files[0];
            var fileUrl = 'https://' + bucketName + '.s3.amazonaws.com/' + file.n");
                WriteLiteral(@"ame;
            if (file) {
                s3.putObject({
                    Key: file.name,
                    ContentType: file.type,
                    Body: file,
                    ACL: ""public-read""
                },
                    function (err, data) {
                        if (data !== null) {
                            alert(""Image uploaded in AWS S3!"");
                            uploadToRDS(fileUrl);
                        }
                        else {
                            console.log('Theres an error', data);
                            alert(""UploadFile function has error!: "" + err);
                        }
                    });
            }
        }


        function loadTalentsData() {
            $loadTalentsDataHandler = jQuery.ajax({
                url: '/api/Talents',
                method: 'GET',
                dataType: 'json',
                cache: false,
                tryCount: 0,
                retryLimit: 3,
     ");
                WriteLiteral(@"           error: function (xhr, textStatus, errorThrown) {
                    if (textStatus == 'timeout') {
                        this.tryCount++;
                        if (this.tryCount <= this.retryLimit) {
                            //try again
                            $.ajax(this);
                            return;
                        }
                        return;
                    }
                }
            }).done(function (data, textStatus, jqXHR) {
                console.log(data);
                var talentsList = data;
                var talentId = """";
                var talent;
                var talentName = """";
                var talentShortName = """";
                var talentReknown = """";
                var talentBio = """";
                var $tableElement = null;
                var $cellElement = null;
                var $rowElement = null;
                $tableBodyElement = $('#talentsTableBody');
                for (index = 0; ind");
                WriteLiteral(@"ex < talentsList.length; index++) {
                    talent = talentsList[index];
                    talentId = talent.id;
                    talentName = talent.name;
                    talentShortName = talent.shortName;
                    talentReknown = talent.reknown;
                    talentBio = talent.bio;
                    $rowElement = $('<tr></tr>');
                    $cellElement = $('<td></td>');
                    $imgElement = $(`<img src='${talent.url}'>`);
                    $cellElement.append($imgElement);
                    $rowElement.append($cellElement);
                    $cellElement = $('<td></td>', { text: talentName });
                    $rowElement.append($cellElement);
                    $cellElement = $('<td></td>', { text: talentShortName });
                    $rowElement.append($cellElement);
                    $cellElement = $('<td></td>', { text: talentReknown });
                    $rowElement.append($cellElement);
                 ");
                WriteLiteral(@"   $cellElement = $('<td></td>', { text: talentBio });
                    $rowElement.append($cellElement);
                    $hyperLinkElement = $('<a class=""edit"" data-toggle=""modal"" onclick=""loadEdit(' + talentId + ')"">Edit</button>').addClass('btn btn-info').attr(""href"", ""#editModal"");
                    $cellElement = $('<td></td>');
                    $cellElement.append($hyperLinkElement);
                    $rowElement.append($cellElement);
                    $hyperLinkElement = $('<a class=""trigger-btn"" data-toggle=""modal"" onclick=""loadDelete(' + talentId + ')"">Delete</button>').addClass('btn btn-warning').attr(""href"", ""#deleteModal"");
                    $cellElement = $('<td></td>');
                    $cellElement.append($hyperLinkElement);
                    $rowElement.append($cellElement);
                    $hyperLinkElement = $('<a class=""details"" href=""/Home/Comment/'/* + talentId*/ + '"">Comment</button>').addClass('btn btn-info');
                    $cellElement = $('<");
                WriteLiteral(@"td></td>');
                    $cellElement.append($hyperLinkElement);
                    $rowElement.append($cellElement);
                    //Insert the $rowElement into the table element represented by $tableElement.
                    $tableBodyElement.append($rowElement);
                }//end of for loop.
            }//end of JavaScript anonymous function
            )//end of the done() method;
        }
        /**/

        function addRecord() {
            var s3 = new AWS.S3({
                params: { Bucket: 'yapjlbuckets3' }
            });
            var file = document.getElementById('fileInput').files[0];
            var fileUrl = 'https://' + bucketName + '.s3.amazonaws.com/' + file.name;

            if (file) {
                console.log(""ready to upload!"");
                s3.putObject({
                    Key: file.name,
                    ContentType: file.type,
                    Body: file,
                    ACL: ""public-read""
                },");
                WriteLiteral(@"
                    function (err, data) {
                        if (data !== null) {
                            uploadToRDS(fileUrl);
                        }
                        else {
                            alert(""Upload failed!"");
                        }
                    });
            }
            else {
                console.log(""cannot find"");
            }
        }


        function WebFormData(inName, inShortName, inReknown, inBio, inPhoto) {
            this.Name = inName;
            this.ShortName = inShortName;
            this.Reknown = inReknown;
            this.Bio = inBio;
            this.Photo = inPhoto;
        }

        function uploadToRDS(PhotoUrl) {
            $(`#createSpinner`).removeClass(""hidden"");
            $(`#addButton`).attr(""disabled"", true);
            var collectedTalentName = $('#TalentNameInput').val();
            var collectedTalentShortName = $('#TalentShortNameInput').val();
            var collectedTalentRekn");
                WriteLiteral(@"own = $('#TalentReknownInput').val();
            var collectedTalentBio = $('#TalentBioInput').val();

            console.log(PhotoUrl);
            var webFormData = new WebFormData(collectedTalentName, collectedTalentShortName, collectedTalentReknown, collectedTalentBio, PhotoUrl);
            var webFormDataInString = JSON.stringify(webFormData);
            console.log(webFormData);

            $saveTalentHandler = jQuery.ajax({
                type: 'POST',
                url: '/api/Talents',
                dataType: 'json',
                //tryCount: 0,
                //retryLimit: 3,
                //error: function (xhr, textStatus, errorThrown) {
                //    if (textStatus == 'timeout') {
                //        this.tryCount++;
                //        if (this.tryCount <= this.retryLimit) {
                //            //try again
                //            $.ajax(this);
                //            return;
                //        }
                ");
                WriteLiteral(@"//        return;
                //    }
                //},
                //contentType: 'application/json',
                //webFormDataInString
                data: {
                    Name: $('#TalentNameInput').val(),
                    ShortName: $('#TalentShortNameInput').val(),
                    Reknown: $('#TalentReknownInput').val(),
                    Bio: $('#TalentBioInput').val(),
                    Url: PhotoUrl
                }
            });
            $saveTalentHandler.done(function (data, textStatus, jqXHR) {
                alert(""A new Talent record is created successfully"");
                console.log(""A new Talent record is created successfully"");
            });
            $saveTalentHandler.fail(function (jqXHR, textStatus) {
                alert(""Failed to create talent!"");
                console.log(""FAIL"");
            });
        }

        function fileValidation() {
            var fileInput = document.getElementById('fileInput');
  ");
                WriteLiteral(@"          var filePath = fileInput.value;
            var allowedExtensions = /(\.jpg|\.jpeg|\.png|\.gif)$/i;
            if (!allowedExtensions.exec(filePath)) {
                alert('Please upload file having extensions .jpeg/.jpg/.png/.gif only.');
                fileInput.value = '';
                return false;
            } else {
                //Image preview
                if (fileInput.files && fileInput.files[0]) {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        //$('#changeImage')
                        //    .attr('src', e.target.result);
                        //$(`.imgContainer`).css(""display"", ""block"");
                        //let image = e.target.result;
                        //image = image.replace(""data:image/jpeg;base64,"", """");
                        ////validateFileInputs(image);
                        //faceDetection(image.b64Clarifai);

                        imageDetails.b64 =");
                WriteLiteral(@" e.target.result;
                        $(""#changeImage"").attr(""src"", imageDetails.b64);
                        $(`.imgContainer`).css(""display"", ""block"");
                        imageDetails.b64Clarifai = imageDetails.b64.replace(/^data:image\/(.*);base64,/, '');
                        imageDetails.width = $(""img"").width();
                        imageDetails.height = $(""img"").height();
                        faceDetection(imageDetails.b64Clarifai);

                    };
                    reader.readAsDataURL(fileInput.files[0]);
                }
            }

            //if (this.files[0]) {
            //    var reader = new FileReader();
            //    reader.onload = function (e) {
            //        console.log(""This is the start "", imageDetails.clarifaiFaces.length)
            //        imageDetails.b64 = e.target.result;
            //        $(""img"").attr(""src"", imageDetails.b64);
            //        imageDetails.b64Clarifai = imageDetails.b64.replace(/^data");
                WriteLiteral(@":image\/(.*);base64,/, '');
            //        imageDetails.width = $(""img"").width();
            //        imageDetails.height = $(""img"").height();
            //        faceDetection(imageDetails.b64Clarifai);
            //    }
            //    reader.readAsDataURL(this.files[0]);
            //}

        }

        function loadEdit(id) {
            $.ajax({
                type: ""GET"",
                url: `/API/Talents/${id}`,
                dataType: ""json"",
                tryCount: 0,
                retryLimit: 3,
                error: function (xhr, textStatus, errorThrown) {
                    if (textStatus == 'timeout') {
                        this.tryCount++;
                        if (this.tryCount <= this.retryLimit) {
                            //try again
                            $.ajax(this);
                            return;
                        }
                        return;
                    }
                },
                succe");
                WriteLiteral(@"ss: function (data) {
                    console.log(data);
                    var talent = data;
                    var loadedTalentName = talent.name;
                    var loadedTalentShortName = talent.shortName;
                    var loadedTalentReknown = talent.reknown;
                    var loadedTalentBio = talent.bio;
                    var loadedTalentID = talent.id
                    //Populate the respective input controls with the talent details.
                    $('#editPhoto').attr(""src"", talent.url);
                    $('#UpdateTalentNameInput').val(loadedTalentName);
                    $('#UpdateTalentShortNameInput').val(loadedTalentShortName);
                    $('#UpdateTalentReknownInput').val(loadedTalentReknown);
                    $('#UpdateTalentBioInput').val(loadedTalentBio);
                    $('#editId').val(loadedTalentID);
                },
                error: function () {
                    alert(""Fail to get data for Talent "" + id);");
                WriteLiteral(@"
                }
            });
        }

        //reset edit modal
        function resetEdit() {
            var id = $(`#editId`).val();
            $.ajax({
                type: ""GET"",
                url: `/API/Talents/${id}`,
                dataType: ""json"",
                tryCount: 0,
                retryLimit: 3,
                error: function (xhr, textStatus, errorThrown) {
                    if (textStatus == 'timeout') {
                        this.tryCount++;
                        if (this.tryCount <= this.retryLimit) {
                            //try again
                            $.ajax(this);
                            return;
                        }
                        return;
                    }
                },
                success: function (data) {
                    $('#UpdateTalentNameInput').val(data.Name);
                    $('#UpdateTalentShortNameInput').val(data.ShortName);
                    $('#UpdateTalentReknownIn");
                WriteLiteral(@"put').val(data.Reknown);
                    $('#UpdateTalentBioInput').val(data.Bio);
                    $('#editId').val(data.Id);
                },
                error: function () {
                    alert(""Fail to get data for Talent "" + id);
                }
            });
        }

        //Replace picture in the edit modal
        function editPhotoFunction(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $('#editPhoto')
                        .attr('src', e.target.result);
                };
                reader.readAsDataURL(input.files[0]);
            }
        }

        function updateTalent() {
            var s3 = new AWS.S3({
                params: { Bucket: 'yapjlbuckets3' }
            });
            var file = document.getElementById('newphoto').files[0];
            if (file) {
                var fileUrl = 'https://' + bucke");
                WriteLiteral(@"tName + '.s3.amazonaws.com/' + file.name;
                console.log(""ready to change photo!"");
                s3.putObject({
                    Key: file.name,
                    ContentType: file.type,
                    Body: file,
                    ACL: ""public-read""
                },
                    function (err, data) {
                        if (data !== null) {
                            updateToRDS(fileUrl);
                        }
                        else {
                            alert(""Upload failed!"");
                        }
                    });
            }
            else {
                console.log(""photo does not change"");
                var url = $('#editPhoto').attr(""src"");
                updateToRDS(url);
            }
        }


        function updateToRDS(photoURLToUpdate) {
            $(`#updateEditSpinner`).removeClass(""hidden"");
            $(`#saveButton`).attr(""disabled"", true);
            var collectedTalentName =");
                WriteLiteral(@" $('#UpdateTalentNameInput').val();
            var collectedTalentShortName = $('#UpdateTalentShortNameInput').val();
            var collectedTalentRekown = $('#UpdateTalentReknownInput').val();
            var collectedTalentBio = $('#UpdateTalentBioInput').val();
            var collectedTalentID = $('#editId').val();
            let nameid = collectedTalentShortName.replace(""_"", """");

            console.log(photoURLToUpdate);
            var webFormData = new WebFormData(collectedTalentName, collectedTalentShortName, collectedTalentRekown, collectedTalentBio, photoURLToUpdate);
            var webFormDataInString = JSON.stringify(webFormData);
            console.log(webFormData);
            $updateTalentHandler = jQuery.ajax({
                type: 'PUT',
                url: `/API/Talents/${collectedTalentID}`,
                //contentType: 'application/json',
                //tryCount: 0,
                //retryLimit: 3,
                //error: function (xhr, textStatus, errorThr");
                WriteLiteral(@"own) {
                //    if (textStatus == 'timeout') {
                //        this.tryCount++;
                //        if (this.tryCount <= this.retryLimit) {
                //            //try again
                //            $.ajax(this);
                //            return;
                //        }
                //        return;
                //    }
                //},
                data: {
                    Name: $('#UpdateTalentNameInput').val(),
                    ShortName: $('#UpdateTalentShortNameInput').val(),
                    Reknown: $('#UpdateTalentReknownInput').val(),
                    Bio: $('#UpdateTalentBioInput').val(),
                    Url: photoURLToUpdate
                }
            })
            $updateTalentHandler.done(function (textStatus, jqXHR) {
                alert("" Talent is updated successfully"");
            });
            $updateTalentHandler.fail(function (jqXHR, textStatus) {
                alert("" Talent u");
                WriteLiteral(@"pdate failed"");
            });
        }


        function loadDelete(id) {
            $.ajax({
                type: ""GET"",
                url: `/API/Talents/${id}`,
                dataType: ""json"",
                tryCount: 0,
                retryLimit: 3,
                error: function (xhr, textStatus, errorThrown) {
                    if (textStatus == 'timeout') {
                        this.tryCount++;
                        if (this.tryCount <= this.retryLimit) {
                            //try again
                            $.ajax(this);
                            return;
                        }
                        return;
                    }
                },
                success: function (data) {
                    console.log(data);
                    $(""#deleteRec"").text(`Do you really want to delete ${data.name} ?`);
                    $(""#deleteId"").val(id);
                },
                error: function (data) {
                 ");
                WriteLiteral(@"   console.log(data);
                }
            });
        }
        //Delete record in the backend and frontend
        function deleteRecord() {
            var id = $(""#deleteId"").val();
            $.ajax({
                type: ""DELETE"",
                url: `/api/talents/${id}`,
                dataType: ""json"",
                tryCount: 0,
                retryLimit: 3,
                error: function (xhr, textStatus, errorThrown) {
                    if (textStatus == 'timeout') {
                        this.tryCount++;
                        if (this.tryCount <= this.retryLimit) {
                            //try again
                            $.ajax(this);
                            return;
                        }
                        return;
                    }
                },
            }).done(function (data, textStatus, jqXHR) {
                alert("" Talent is deleted successfully"");
            }).fail(function (data) {
                conso");
                WriteLiteral("le.log(data);\r\n                alert(\" Talent cannot be deleted\");\r\n            });\r\n        }\r\n\r\n    </script>\r\n");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
